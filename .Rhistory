base = readxl::read_excel("C:/Users/Mario/Desktop/Ramos U/Optativos/Analisis predictivo/Base de datos/tourism.xlsx")
#Se crea un tibble identico al tourism visto anteriormente
identico = base %>% mutate(Quarter = yearquarter(Quarter))
#Aqui leo lalibreria y cargo la base de datos
library(tsibble)
#Se crea un tibble identico al tourism visto anteriormente
identico = base %>% mutate(Quarter = yearquarter(Quarter))
library(dplyr)
#Se crea un tibble identico al tourism visto anteriormente
identico = base %>% dplyr::mutate(Quarter = yearquarter(Quarter))
#Lo transformo en tsibble
identico = identico %>% as_tsibble( index=Quarter, key=c(Region,State,Purpose,Trips))
#Lo transformo en tsibble
identico = identico %>% as_tsibble( index=Quarter, key=c(Region,State,Purpose))
View(identico)
#Filtro dentro de la columna de Trips la fila que tiene el mayor valor de Trips
#Y luego selecciono que me muestre las columnas region y proposito
identico2 %>% filter(Trips==max(Trips)) %>% select(Region,Purpose)
#Filtro dentro de la columna de Trips la fila que tiene el mayor valor de Trips
#Y luego selecciono que me muestre las columnas region y proposito
identico %>% filter(Trips==max(Trips)) %>% select(Region,Purpose)
View(identico)
#Filtro dentro de la columna de Trips la fila que tiene el mayor valor de Trips
#Y luego selecciono que me muestre las columnas region y proposito
identico %>% filter(Trips==max(Trips)) %>% select(Region,Purpose)-> identico2
View(base)
#Observo el tsibble tourism de la libreria tsibble, para ver como debe quedar
View(tourism)
View(identico)
identico %>% select(-State) %>% summarise(total=Trips)
identico %>% summarise(total=Trips)
identico %>% summarise(total=sum(Trips))
identico %>%group_by(State) %>%  summarise(total=sum(Trips))
library(readr)
library(dplyr)
amazon= read_csv("C:/Users/Mario/Desktop/Ramos U/Optativos/Visualizacion de datos/AMZN.csv")
View(amazon)
View(amazon)
amazon %>% mutate(retorno=log(Close)-lag(log(Close)))
amazon %>% mutate(retorno=log(Close)-lag(log(Close))) -> amazon
View(amazon)
plot(amazon$Date,amazon$retorno)
plot(amazon$Date,amazon$`Adj Close`)
View(amazon)
hist(amazon$Date,amazon$`Adj Close`)
amazon %>% filter(Date<2015-01-01)
amazon %>% filter(Date >= 2015-01-01)
amazon %>% filter(Date > 2015-01-01)
amazon %>% filter(Date < 2015-01-01)
amazon %>% filter(Date > 2015-01-01)
amazon %>% filter(Date > "2015-01-01")
amazon %>% filter(Date >= "2015-01-01")
amazon %>% filter(Date >= "2015-01-01") %>%
plot(amazon$Date,amazon$`Adj Close`)
amazon %>% filter(Date >= "2015-01-01") %>%
plot(amazon$Date,amazon$`Adj Close`)
amazon %>% filter(Date >= "2015-01-01") -> filtrado
plot(filtrado$Date,filtrado$`Adj Close`)
library(tidyquant)
fb <- tq_get("FB", get = "stock.prices", from = "2018-01-01", to = "2020-07-20") # obtener los datos
View(fb)
fb <- tq_get("FB", get = "stock.prices", from = "2018-01-01", to = "2020-08-25") # obtener los datos
View(fb)
View(fb)
tq_mutate_fun_options()
fb1 <- fb %>% tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "arithmetic",
col_rename = "Ra")
View(fb1)
#Filtro dentro de la columna de Trips la fila que tiene el mayor valor de Trips
#Y luego selecciono que me muestre las columnas region y proposito
identico %>% filter(Trips==max(Trips)) %>% select(Region,Purpose)-> identico2
source('C:/Users/Mario/Desktop/Ramos U/Optativos/Analisis predictivo/Ejercicios resueltos por mi/Clase 2 ejercicios.R')
View(identico)
library(fpp3)
library(readxl)
source('C:/Users/Mario/Desktop/Ramos U/Optativos/Analisis predictivo/ejercicios_con_tourism.R', echo=TRUE)
source('C:/Users/Mario/Desktop/Ramos U/Optativos/Analisis predictivo/ejercicios_con_tourism.R', echo=TRUE)
library(fpp3)
PBS %>%
filter(ATC2=="A10") %>%
summarise(TotalC = sum(Cost)) %>%
mutate(Cost = TotalC/1e6) -> a10
a10 %>% autoplot(Cost) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") + xlab("Year")
# Ejercicio repita el grÃ¡fico de ansett que estÃ¡ en la presentaciÃ³n
ansett %>%
autoplot(Passengers)
View(ansett)
source('C:/Users/Mario/Desktop/Ramos U/Optativos/Analisis predictivo/clase_3_ap.R', echo=TRUE)
ansett %>%
filter(Class="Economy") %>%
autoplot(Passengers)
ansett %>%
filter(Class=="Economy") %>%
autoplot(Passengers)
View(ansett)
ansett %>%
filter(Airports=="MEL-SYD") %>%
autoplot(Passengers)
View(aus_production)
aus_production %>%
autoplot(Bricks)
pelt %>%
autoplot(Lynx)
gafa_stock %>%
autoplot(Close)
vic_elec %>%
autoplot(Demand)
?vic_elec
vic_elec %>%
autoplot(Demand) +
labs(title="Demanda de electricidad",x="a",y="b")
?vic_elec
?PBS
PBS$Concession %>% unique()
library(fpp3)
PBS$Type %>% unique()
PBS$ATC1_desc %>% unique()
PBS$ATC2_desc %>% unique()
PBS %>%
filter(ATC2=="A10")
PBS %>%
filter(ATC2=="A10") %>%
summarise(TotalC = sum(Cost))
PBS %>%
filter(ATC2=="A10")
PBS %>%
filter(ATC2=="A10") %>%
summarise(TotalC = sum(Cost))
View(a10)
PBS %>%
filter(ATC2=="A10") %>%
summarise(TotalC = sum(Cost))
PBS %>%
filter(ATC2=="A10")
library(fpp3)
library(readxl)
# 1. Leer el archivo Excel en R y exminar el tibble resultante ---------
tourism <- read_excel("C:/Users/Mario/Desktop/Ramos U/Optativos/Analisis predictivo/Base de datos/tourism.xlsx")
# breve examen de los datos
tourism
# estadÃ­sticas de la que es double
summary(tourism$Trips)
mi_tsibble_tourism <- tourism %>%
mutate(Quarter = yearquarter(Quarter)) %>%
as_tsibble(index = Quarter,
key = c(State, Region, Purpose))
#arrange ordena las variables
arrange(tsibble::tourism, State, Region, Purpose, Quarter)
arrange(mi_tsibble_tourism, State, Region, Purpose, Quarter)
View(mi_tsibble_tourism)
mi_tsibble_tourism %>%
group_by(Region, Purpose)
mi_tsibble_tourism %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips))
# Si agrupamos por region y proposito no promediamos casos pq es
# la particiÃ³n mÃ¡s fina
mi_tsibble_tourism %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips)) %>%
arrange(desc(avg_trips))
View(a10)
PBS
?
PBS
View(PBS)
mi_tsibble_tourism %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips)) %>%
arrange(desc(avg_trips))
mi_tsibble_tourism %>%
as_tibble() %>%
group_by(Region, Purpose) %>%
mi_tsibble_tourism %>%
as_tibble() %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips)) %>%
arrange(desc(avg_trips))
mi_tsibble_tourism %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips)) %>%
arrange(desc(avg_trips))
mi_tsibble_tourism %>%
as_tibble() %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips)) %>%
arrange(desc(avg_trips))
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter))
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio)
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio) %>% # mi anio es el nuevo index
group_by(Region, Purpose)
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio) %>% # mi anio es el nuevo index
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips))
View(mi_tsibble_tourism)
mi_tsibble_tourism %>%
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips))
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio) %>% # mi anio es el nuevo index
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips))
mi_tsibble_tourism
View(mi_tsibble_tourism)
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter))
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio)
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio) %>% # mi anio es el nuevo index
group_by(Region, Purpose)
mi_tsibble_tourism %>%
mutate(mi_anio = year(Quarter)) %>% #generamos la variable usando year()
index_by(mi_anio) %>% # mi anio es el nuevo index
group_by(Region, Purpose) %>%
summarise(avg_trips = mean(Trips))
View(PBS)
pbs2 = PBS %>% filter(ATC2=="A10")
View(pbs2)
PBS %>%
filter(ATC2=="A10") %>%
summarise(TotalC = sum(Cost))
library(readxl)
